import time
import sys
import os
import pygetwindow as gw
import pyautogui
import pyperclip
from elevenlabs import ElevenLabs
import pytesseract
import librosa
from playsound import playsound

# =======================
# ‚öôÔ∏è  C·∫•u h√¨nh
# =======================
ELEVEN_API_KEY = "sk_31b5d4cf5f551c00741db0e39462b316d4f7480dd6164947"
OUTPUT_MP3 = "output_jpn.mp3"
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

def play_audio(filepath):
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"{filepath} not found")
    try:
        print("Playing with playsound:", filepath)
        playsound(filepath)
        return
    except Exception as e:
        print("playsound failed:", e)
    try:
        data, sr = librosa.load(filepath, sr=None)
        print(f"Fallback playback: {librosa.get_duration(y=data, sr=sr):.2f}s, sr={sr}")
        sd.play(data, sr)
        sd.wait()
    except Exception as e:
        print("Fallback playback also failed:", e)
        raise

def ocr_region(region):
    # region = (left, top, width, height)
    screenshot = pyautogui.screenshot(region=region)
    text = pytesseract.image_to_string(screenshot, lang="jpn")
    return text.strip()

    
# =======================
# 1Ô∏è‚É£  T√¨m c·ª≠a s·ªï Firefox
# =======================
def find_firefox_window():
    wins = [w for w in gw.getWindowsWithTitle("") if "Mozilla Firefox" in w.title]
    if not wins:
        print("‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï Firefox ƒëang m·ªü.")
        sys.exit(1)
    win = wins[0]
    win.activate()
    time.sleep(0.7)
    return win

# =======================
# 2Ô∏è‚É£  Click theo ph·∫ßn trƒÉm
# =======================
def click_relative(win, x_ratio, y_ratio):
    """
    Click v·ªã tr√≠ theo % trong c·ª≠a s·ªï.
    x_ratio, y_ratio: 0.0 ‚Äì 1.0
    """
    x = win.left + int(win.width * x_ratio)
    y = win.top + int(win.height * y_ratio)
    pyautogui.moveTo(x, y, duration=0.6)
    pyautogui.click()
    print(f"üëâ Click t·∫°i ({x}, {y})")

# =======================
# 3Ô∏è‚É£  Copy text hi·ªÉn th·ªã
# =======================
def copy_visible_text(win):
   
    x = win.left + int(win.width * 0.350226)
    y = win.top  + int(win.height * 0.363243)
    w = int(win.width * 0.449322)
    h = int(win.height * 0.405405)
   
    img = pyautogui.screenshot(region=(x, y, w, h))
    text = pytesseract.image_to_string(img, lang="jpn")
    return text.strip()


# =======================
# 4Ô∏è‚É£  ƒê·ªçc TTS
# =======================
def tts_and_play(full_text: str):
    client = ElevenLabs(api_key=ELEVEN_API_KEY)

    # T·∫°o TTS
    audio_stream = client.text_to_speech.convert(
        text=full_text,
        voice_id="zrHiDhphv9ZnVXBqCLjz",   # voice ƒëa ng√¥n ng·ªØ
        model_id="eleven_multilingual_v2",
        output_format="mp3_44100_128"
    )

    # L∆∞u file mp3
    with open(OUTPUT_MP3, "wb") as f:
        for chunk in audio_stream:
            f.write(chunk)
    print("Saved TTS to", OUTPUT_MP3)

    # Ph√°t v√† l·∫•y th·ªùi l∆∞·ª£ng ƒë·ªÉ bi·∫øt khi n√†o stop recording
    play_audio(OUTPUT_MP3)

    # duration cho b·∫°n bi·∫øt ch√≠nh x√°c th·ªùi gian ph√°t

    time.sleep(0.1)  # buffer nh·ªè n·∫øu c·∫ßn
    # stop_recording()  # <-- G·ªçi h√†m stop ghi √¢m t·∫°i ƒë√¢y
    # üîπ 6. Click "Stop Recording"
    win = find_firefox_window()
    click_relative(win, 0.581343, 0.808108)
    time.sleep(2)

    # üîπ 7. Click "Submit recording"
    click_relative(win, 0.50, 0.95)
    print("‚úÖ Ho√†n t·∫•t!")

# =======================
# 5Ô∏è‚É£  Quy tr√¨nh t·ª± ƒë·ªông
# =======================
def main():
    win = find_firefox_window()
    print(f"‚úÖ T√¨m th·∫•y: {win.title} | K√≠ch th∆∞·ªõc: {win.width}x{win.height}")

    # üîπ 1. Click "Start campaign" (thay to·∫° ƒë·ªô t·ªâ l·ªá cho ph√π h·ª£p)
    click_relative(win, 0.43522 , 0.4963)
    time.sleep(2)

    # üîπ 2. Click "I'm ready!"
    click_relative(win, 0.50, 0.80)
    time.sleep(2)

    # üîπ 3. Click "Start Recording"
    click_relative(win, 0.50, 0.80)
    time.sleep(2)  # ƒë·ª£i text xu·∫•t hi·ªán

    # üîπ 4. Click v√πng text ƒë·ªÉ focus, sau ƒë√≥ copy
    click_relative(win, 0.50, 0.40)
    time.sleep(1)
    full_text = copy_visible_text(win)
    print("üìú Text l·∫•y ƒë∆∞·ª£c:\n", full_text)

    # üîπ 5. ƒê·ªçc TTS
    tts_and_play(full_text)



if __name__ == "__main__":
    main()
